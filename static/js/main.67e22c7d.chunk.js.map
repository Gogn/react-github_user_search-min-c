{"version":3,"sources":["components/navbar.js","context/alert/alertContext.js","context/github/githubContext.js","components/Search.js","components/Card.js","pages/Home.js","pages/About.js","components/Repos.js","pages/Profile.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlerState.js","context/github/githubReducer.js","context/github/GithubState.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","exact","to","AlertContext","createContext","GithubContext","Search","useState","value","setValue","alert","useContext","github","type","placeholder","onChange","event","target","onKeyPress","key","clearUsers","trim","hide","search","show","Card","user","src","avatar_url","alt","login","Home","loading","users","map","id","About","Repos","repos","Fragment","repo","href","html_url","rel","name","Profile","match","getUser","getRepos","urlName","params","useEffect","company","location","bio","blog","followers","following","public_repos","public_gists","style","width","Alert","role","text","aria-label","onClick","aria-hidden","handlers","state","action","payload","alertReducer","DEFAULT","AlertState","children","useReducer","dispatch","Provider","githubReducer","withCreds","url","process","GithubState","setLoading","a","async","axios","get","response","data","items","App","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67e22c7d.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from \"react-router-dom\";\n\nexport const Navbar = () => (\n    <nav className='navbar navbar-dark bg-primary navbar-expand-lg'>\n      <div className=\"navbar-brand\">\n        GitHub: Поиск пользователей\n      </div>\n      <ul className='navbar-nav'>\n        <li className='nav-item'>\n          <NavLink exact to=\"/\" className='nav-link'>Главная</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\" className='nav-link'>Информация</NavLink>\n        </li>\n      </ul>\n    </nav>\n)","import {createContext} from 'react'\n\nexport const AlertContext = createContext()","import {createContext} from 'react'\n\nexport const GithubContext = createContext()","import React, {useContext, useState} from 'react'\nimport {AlertContext} from \"../context/alert/alertContext\";\nimport {GithubContext} from \"../context/github/githubContext\";\n\nexport const Search = () => {\n  const [value, setValue] = useState('')\n  const alert = useContext(AlertContext)\n  const github = useContext(GithubContext)\n\n  const onSubmit = (event) => {\n    if (event.key !== 'Enter') {\n      return\n    }\n\n    github.clearUsers()\n\n    if (value.trim()) {\n      alert.hide()\n      github.search(value.trim())\n    } else {\n      alert.show('Введите данные пользователя!')\n    }\n  }\n\n  return (\n    <div className='form-group'>\n      <input\n        type=\"text\"\n        className='form-control'\n        placeholder='Введите ник пользователя'\n        value={value}\n        onChange={event => setValue(event.target.value)}\n        onKeyPress={onSubmit}\n      />\n    </div>\n  )\n}","import React from 'react'\nimport {Link} from \"react-router-dom\";\n\nexport const Card = ({user}) => (\n  <div className='card'>\n    <img src={user.avatar_url} alt={user.login} className='card-img-top' />\n    <div className='card-body'>\n      <h5 className='card-title'>{user.login}</h5>\n      <Link to={'/profile/' + user.login} className='btn btn-primary' >Открыть</Link>\n    </div>\n  </div>\n)\n\n","import React, {Fragment, useContext} from 'react'\nimport {Search} from \"../components/Search\";\nimport {Card} from \"../components/Card\";\nimport {GithubContext} from \"../context/github/githubContext\";\n\nexport const Home = () => {\n  const {loading, users} = useContext(GithubContext)\n\n\n  return (\n    <Fragment>\n      <Search/>\n\n      <div className=\"row\">\n\n        {loading\n          ? <p className='text-center'>Загрузка...</p>\n          : users.map((user) => (\n            <div className=\"col-sm-4 mb-4\" key={user.id}>\n              <Card user={user} />\n            </div>\n          ))\n        }\n\n      </div>\n    </Fragment>\n  )\n}","import React from 'react'\n\nexport const About = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Информация</h1>\n        <p className=\"lead\">Версия приложения: <strong>1.0.0</strong></p>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nexport const Repos = ({repos}) => (\n  <React.Fragment>\n    {repos.map(repo => (\n      <div className='card mb-3' key={repo.id}>\n        <div className=\"card-body\">\n          <h5>\n            <a\n              href={repo.html_url}\n               target='_blank'\n               rel='noopener noreferrer'\n            >{repo.name} </a>\n          </h5>\n        </div>\n      </div>\n    ))}\n  </React.Fragment>\n)","import React, {Fragment, useContext, useEffect} from 'react'\nimport {GithubContext} from \"../context/github/githubContext\";\nimport {Link} from \"react-router-dom\";\nimport {Repos} from \"../components/Repos\";\n\nexport const Profile = ({match}) => {\n  const {getUser, getRepos, loading, user, repos} = useContext(GithubContext)\n  const urlName = match.params.name\n\n  useEffect(() => {\n    getUser(urlName)\n    getRepos(urlName)\n    // eslint-disable-next-line\n  }, [])\n\n  if(loading) {\n    return <p className='text-center'>Загрузка...</p>\n  }\n\n  const {\n    name, company, avatar_url,\n    location, bio, blog,\n    login, html_url, followers,\n    following, public_repos, public_gists\n  } = user\n\n  return (\n    <Fragment>\n      <Link to=\"/\" className='btn btn-link'>На главную</Link>\n\n      <div className=\"card mb-4\">\n        <div className=\"card-body\">\n          <div className=\"row\">\n            <div className=\"col-sm-3 text-center\">\n              <img\n                src={avatar_url}\n                alt={name}\n                style={{width: '150px'}}\n              />\n              <h1>{name}</h1>\n              {location && <p>Местоположение: {location}</p>}\n            </div>\n            <div className=\"col\">\n              {\n                bio && <Fragment>\n                  <h3>Биография:</h3>\n                  <p>{bio}</p>\n                </Fragment>\n              }\n\n              <ul>\n                {login && <li>\n                  <strong>Имя пользователя: </strong> {login}\n                </li>}\n\n                {company && <li>\n                  <strong>Компания: </strong> {company}\n                </li>}\n\n                {blog && <li>\n                  <strong>Личный сайт: </strong> {blog}\n                </li>}\n              </ul>\n\n              <div className=\"badge badge-primary\">Подписчики: {followers}</div>\n              <div className=\"badge badge-success\">Подписан: {following}</div>\n              <div className=\"badge badge-info\">Репозитории: {public_repos}</div>\n              <div className=\"badge badge-dark\">gists: {public_gists}</div>\n            </div>\n          </div>\n        </div>\n        <a\n          href={html_url}\n          target='_blank'\n          rel='noopener noreferrer'\n          className='btn btn-info'\n        >Открыть профиль</a>\n      </div>\n\n      <Repos repos={repos} />\n    </Fragment>\n  )\n}","import React, {useContext} from 'react'\nimport {AlertContext} from \"../context/alert/alertContext\";\n\nexport const Alert = () => {\nconst {alert, hide} = useContext(AlertContext)\n\n  if (!alert) return null\n\n  return (\n    <div\n      className={`alert alert-${alert.type || 'secondary'} alert-dismissible fade show`}\n      role=\"alert\"\n    >\n      {alert.text}\n      <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={hide}>\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  )\n}","import {HIDE_ALERT, SHOW_ALERT} from \"../types\";\n\nconst handlers = {\n  [SHOW_ALERT]: (state, action) => action.payload,\n  [HIDE_ALERT]: () => null,\n  DEFAULT: state => state\n}\n\nexport const alertReducer = (state, action) => {\n\n  // Switch from types.js style:\n  // switch (action.type) {\n  //   case SHOW_ALERT: return action.payload\n  //   case HIDE_ALERT: return null\n  //   default: return state\n  // }\n\n  // const function style:\n  const handler = handlers[action.type] || handlers.DEFAULT\n  return handler(state, action)\n\n}","export const SHOW_ALERT = 'SHOW_ALERT'\nexport const HIDE_ALERT = 'HIDE_ALERT'\n\nexport const CLEAR_USERS = 'CLEAR_USERS'\nexport const GET_REPOS = 'GET_REPOS'\nexport const GET_USER = 'GET_USER'\nexport const SEARCH_USERS = 'SEARCH_USERS'\nexport const SET_LOADING = 'SET_LOADING'","import React, {useReducer} from 'react'\nimport {AlertContext} from \"./alertContext\";\nimport {alertReducer} from \"./alertReducer\";\nimport {HIDE_ALERT, SHOW_ALERT} from \"../types\";\n\nexport const AlertState = ({children}) => {\n  const [state, dispatch] = useReducer(alertReducer, null)\n\n  const hide = () => dispatch({type: HIDE_ALERT})\n  const show = (text, type = 'secondary') => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: {type, text}\n    })\n  }\n\n  return (\n    <div>\n      <AlertContext.Provider value={{\n        hide, show, alert: state\n      }}>\n        {children}\n      </AlertContext.Provider>\n    </div>\n  )\n}","import {CLEAR_USERS, GET_REPOS, GET_USER, SEARCH_USERS, SET_LOADING} from \"../types\";\n\nconst handlers = {\n  [SEARCH_USERS]: (state, action) => ({...state, users: action.payload, loading: false}),\n  [GET_REPOS]: (state, {payload}) => ({...state, repos: payload, loading: false}),\n  [GET_USER]: (state, {payload}) => ({...state, user: payload, loading: false}),\n  [SET_LOADING]: (state) => ({...state, loading: true}),\n  [CLEAR_USERS]: (state) => ({...state, users: []}),\n  DEFAULT: state => state\n}\n\nexport const githubReducer = (state, action) => {\n  const handler = handlers[action.type] || handlers.DEFAULT\n  return handler(state, action)\n}","import React, {useReducer} from 'react'\nimport axios from 'axios'\nimport {GithubContext} from \"./githubContext\";\nimport {githubReducer} from \"./githubReducer\";\nimport {CLEAR_USERS, GET_REPOS, GET_USER, SEARCH_USERS, SET_LOADING} from \"../types\";\n\n// environment variables, защита данных\nconst CLIENT_ID = (process.env.REACT_APP_CLIENT_ID)\nconst CLIENT_SECRET = (process.env.REACT_APP_CLIENT_SECRET)\n\nconst withCreds = url => {\n  return `${url}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n}\n\nexport const GithubState = ({children}) => {\n  const initialState = {\n    user: {},\n    users: [],\n    loading: false,\n    repos: []\n  }\n  const [state, dispatch] = useReducer(githubReducer, initialState)\n\n  const search = async value => {\n    setLoading()\n\n    const response = await axios.get(\n      withCreds(`https://api.github.com/search/users?q=${value}&`)\n    )\n\n    dispatch({\n      type: SEARCH_USERS,\n      payload: response.data.items\n    })\n  }\n\n  const getUser = async (name) => {\n    setLoading()\n\n    const response = await axios.get(\n      withCreds(`https://api.github.com/users/${name}?`)\n    )\n\n    dispatch({\n      type: GET_USER,\n      payload: response.data\n    })\n  }\n\n  const getRepos = async (name) => {\n    setLoading()\n    const response = await axios.get(\n      withCreds(`https://api.github.com/users/${name}/repos?per_page=5&`)\n    )\n\n    dispatch({\n      type: GET_REPOS,\n      payload: response.data\n    })\n  }\n\n  const clearUsers = () => dispatch({type: CLEAR_USERS})\n\n  const setLoading = () => dispatch({type: SET_LOADING})\n\n  const {user, users, repos, loading} = state\n\n  return (\n    <GithubContext.Provider value={{\n      search, getUser, getRepos, clearUsers, setLoading,\n      user, users, repos, loading\n    }}>\n      {children}\n    </GithubContext.Provider>\n  )\n}","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport {Navbar} from \"./components/navbar\";\nimport {Home} from \"./pages/Home\";\nimport {About} from \"./pages/About\";\nimport {Profile} from \"./pages/Profile\";\nimport {Alert} from \"./components/Alert\";\nimport {AlertState} from \"./context/alert/AlerState\";\nimport {GithubState} from \"./context/github/GithubState\";\n\nfunction App() {\n  return (\n    <GithubState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar/>\n          <div className=\"container pt-4\">\n            <Alert alert={{text: 'Test'}}/>\n            <Switch>\n              <Route path='/' exact component={Home}/>\n              <Route path='/about' component={About}/>\n              <Route path='/profile/:name' component={Profile}/>\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </GithubState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}